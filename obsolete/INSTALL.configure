IMPORTANT WARNING
=================

July 2, 2014

The "configure" way is no more maintained in GDL.  To avoid confict
with Debian and Ubuntu packaging which are looking for "configure"
related files, we move then into this "obsolete/" sub-directory.

The "configure" way is still working (used in 2014 on various OS like
CentOS, Debian and Ubuntu) but it does not covered all the options we
have now in CMake and we don't plan to update the "configure" files.

You can still regenerated the "configure" file by moving
"config.h.in" and "configure.in" in the root of the GDL project, then
doing few commands
($ mkdir m4   not need on most OS, but needed on old CentOS !)
$ autoreconf -vfi
$ ./configure
$ make

e.g. on a 8-cores with lot of RAM :
$ ./configure --without-python --with-hdf=no --with-hdf5=no --with-pslib=no \
    --with-plplotdir=$HOME/GDL/plplot-5.9.6/Compilation/ \
    --with-Magick=$HOME/GDL/ImageMagick-6.5.9-0/Compilation \
    --without-GraphicsMagick --with-eigen3=$HOME/GDL/Eigen/Eigen3.1.2/
$ make -j 20


Experiences gain during last 3 years indicated that
it is more tricky to maintain the "configure" way than the "CMake" way.

CMake in now under "new BSD license" and is packaged in most Linux
distributions. It is very easy to compiled it from source under other
OS like OSX.

QUICK INSTALLATION:
===================

(If you encounter any problems, please read on further, also have a
look at the REQUIREMENTS section in the README file.)

* unpack the tarball under any directory (tar xfvz gdl-VERION.tar.gz)
* change to the new subdirectory gdl-VERSION 
* type "./configure"  (use './configure --help' for a list of options)
* type "make"         (use 'make -j N' to run N parallel processes)
* optionally type "make check" to test the build 
* type "make install" to deploy GDL binary (gdl), libraries, manpage, etc

See INSTALL.CMake on instructions how to configure GDL using CMake.

If you know IDL, you should feel very familiar with GDL.
A list of command-line options is available both in the manpage and
after typing "gdl --help". 

Some GDL test files are in the gdl/testsuite subdirectory (test_*.pro)

Note:
When compiling you might get some warnings:
"datatype.cpp: comparison is always false due to limited range of data type"
That's OK. Please see the comment in datatypes.cpp near the warning
for an explanation.

If you have an old Plplot version (before 5.9.0) you must say it using
--enable-oldplplot

If you are compiling GDL source from the repository (i.e. not a release),
and not using CMake, first you have to generate the "configure" script
and other related files by invoking "autoreconf -i".

BUILDING GDL AS A PYTHON MODULE:
================================

to build the GDL python module, configure must be run with
the --enable-python_module option (i.e. if you wish to use
the GDL standalone version *and* use GDL from within python,
you need to build (configure/make) it twice.

For python standards, the installation procedure is
quite 'unconventional' but simple:

You need to run configure with the --enable-python_module option.
All other options are the same:

[OS X note: Due to some incompatibilities, on OS X you might have to
recreate the configure script (this is if the building of libantlr
aborts with an error message):
alocal && automake && autoconf ]

./configure --enable-python_module
make

The result is a dynamic library file "libgdl.so.0.0.0" 
("libgdl.0.0.0.dylib" on OS X) in the "src/.libs" subdir.
Copy these library into your python site-packages 
(e.g. /usr/lib/python2.3/site-packages) directory as
GDL.so (same name on OS X) (note the capital letters) and you are done.

See PYTHON.txt for further information.


OPTIONS TO CONFIGURE SCRIPT:
============================

Apart form the further down mentioned options, the following
options can be used:

--enable-python_module            build the GDL python module instead of
                                  the standalone program (default). See above.
--enable-python_version=VERSION#  the configure script tries to automatically 
                                  determine which python version is actually 
                                  used. With this option the version can be
                                  expicitely set 
                                  (e.g. --enable-python_version=2.6).
--with-ncursesdir=DIR  to specify the ncurses (or curses) directory tree
--with-readlinedir=DIR to specify the GNU readline directory tree
--with-libzdir=DIR     to specify the Zlib directory tree
--with-openmp=no       to disable the OpenMP support (e.g. for GCC <4.2)
--with-gsldir=DIR      to specify the GSL directory tree
--with-plplotdir=DIR   to specify the plplot directory tree
--enable-oldplplot     to specify that you have an older than 5.9.0 plplot lib.

--with-Magick=DIR      to specify the ImageMagick directory tree
--with-Magick=no       to not use ImageMagick

--with-netcdf=DIR      to specify the netcdf directory tree
--with-netcdf=no       to not use netcdf

--with-fftw=DIR        to specify the FFTW directory tree
--with-fftw=no         to not use FFTW

--with-eigen=DIR       to specify the Eigen3 directory tree

... and so on for: wxWidgets, hdf, hdf5, fftw, libproj4, python, udunits, 
grib, libshape and others - see README file for details (REQUIREMENTS section).

For example, if you have python installed in /usr/local, use

./configure --with-python=/usr/local

Basic Installation Instructions
===============================

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, a file
`config.cache' that saves the results of its tests to speed up
reconfiguring, and a file `config.log' containing compiler output
(useful mainly for debugging `configure').

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If at some point `config.cache'
contains results you don't want to keep, you may remove or edit it.

   The file `configure.in' is used to create `configure' by a program
called `autoconf'.  You only need `configure.in' if you want to change
it or regenerate `configure' using a newer version of `autoconf'.

 
Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  You can give `configure'
initial values for variables by setting them in the environment.  Using
a Bourne-compatible shell, you can do that on the command line like
this:
     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Or on systems that have the `env' program, you can do it like this:
     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not supports the `VPATH'
variable, you have to compile the package for one architecture at a time
in the source code directory.  After you have installed the package for
one architecture, use `make distclean' before reconfiguring for another
architecture.

Installation Names
==================

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

Specifying the System Type
==========================

   There may be some features `configure' can not figure out
automatically, but needs to determine by the type of host the package
will run on.  Usually `configure' can figure that out, but if it prints
a message saying it can not guess the host type, give it the
`--host=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name with three fields:
     CPU-COMPANY-SYSTEM

See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the host type.

   If you are building compiler tools for cross-compiling, you can also
use the `--target=TYPE' option to select the type of system they will
produce code for and the `--build=TYPE' option to select the type of
system on which you are compiling the package.

Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Operation Controls
==================

   `configure' recognizes the following options to control how it
operates.

`--cache-file=FILE'
     Use and save the results of the tests in FILE instead of
     `./config.cache'.  Set FILE to `/dev/null' to disable caching, for
     debugging `configure'.

`--help'
     Print a summary of the options to `configure', and exit.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--version'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`configure' also accepts some other, not widely useful, options.
